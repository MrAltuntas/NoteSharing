openapi: 3.0.3
info:
  title: Note Sharing API
  description: |-
    API for a course note sharing platform that allows students to manage courses and share study notes.
    The API supports user authentication, course management, and note sharing functionality.
  termsOfService: http://www.notesharing.com/terms/
  contact:
    name: API Support
    email: support@notesharing.com
    url: https://www.notesharing.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
externalDocs:
  description: Find out more about Note Sharing
  url: https://www.notesharing.com/docs
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.notesharing.com/v1
    description: Production server
tags:
  - name: auth
    description: Authentication operations
    externalDocs:
      description: Learn more about authentication
      url: https://www.notesharing.com/docs/auth
  - name: courses
    description: Course management operations
    externalDocs:
      description: Learn more about courses
      url: https://www.notesharing.com/docs/courses
  - name: notes
    description: Note management operations
    externalDocs:
      description: Learn more about notes
      url: https://www.notesharing.com/docs/notes
  - name: enrollments
    description: Course enrollment operations
    externalDocs:
      description: Learn more about enrollments
      url: https://www.notesharing.com/docs/enrollments
  - name: statistics
    description: API usage statistics operations
    externalDocs:
      description: Learn more about API statistics
      url: https://www.notesharing.com/docs/statistics

paths:
  # Authentication Endpoints
  /api/v1/auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Creates a new user account in the system
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register200Response'
        '400':
          description: Invalid request - missing required fields or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticates a user and returns a JWT token
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login200Response'
        '400':
          description: Invalid request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/validate:
    post:
      tags:
        - auth
      summary: Validate token
      description: Validates a JWT token and returns its status
      operationId: validateToken
      responses:
        '200':
          description: Token validation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateToken200Response'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Course Endpoints
  /api/v1/courses:
    post:
      tags:
        - courses
      summary: Create a new course
      description: Creates a new course in the system
      operationId: createCourse
      requestBody:
        $ref: '#/components/requestBodies/CourseRequest'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - courses
      summary: Get all courses
      description: Returns a list of all courses
      operationId: getAllCourses
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Sorting criteria (format - field,direction)
          schema:
            type: string
            example: "title,asc"
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/courses/{courseId}:
    parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the course

    get:
      tags:
        - courses
      summary: Get course by ID
      description: Returns a course by its ID
      operationId: getCourseById
      responses:
        '200':
          description: Course information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - courses
      summary: Update course
      description: Updates an existing course
      operationId: updateCourse
      requestBody:
        $ref: '#/components/requestBodies/CourseRequest'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - courses
      summary: Delete course
      description: Deletes a course by its ID
      operationId: deleteCourse
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # New Enrollment Endpoints
  /api/v1/courses/{courseId}/enrollments:
    parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the course

    post:
      tags:
        - enrollments
      summary: Enroll student in course
      description: Enrolls a student in a specific course
      operationId: enrollStudentInCourse
      requestBody:
        $ref: '#/components/requestBodies/EnrollmentRequest'
      responses:
        '200':
          description: Student enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course or student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Student already enrolled in course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - enrollments
      summary: Get enrolled students
      description: Returns a list of students enrolled in a course
      operationId: getEnrolledStudents
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of enrolled students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentsResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/courses/{courseId}/rate:
    parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the course

    post:
      tags:
        - courses
      summary: Rate course
      description: Adds a rating to a course
      operationId: rateCourse
      requestBody:
        $ref: '#/components/requestBodies/RatingRequest'
      responses:
        '200':
          description: Course rated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/courses/search:
    get:
      tags:
        - courses
      summary: Search courses
      description: Searches for courses based on a query
      operationId: searchCourses
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/courses/{courseId}/visit:
    parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the course

    post:
      tags:
        - courses
      summary: Visit course
      description: Records a visit to a course
      operationId: visitCourse
      responses:
        '200':
          description: Course visit recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Note Endpoints
  /api/v1/notes/courses/{courseId}:
    parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the course

    post:
      tags:
        - notes
      summary: Add note
      description: Adds a note to a course
      operationId: addNote
      requestBody:
        $ref: '#/components/requestBodies/NoteRequest'
      responses:
        '201':
          description: Note added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - notes
      summary: Get notes by course ID
      description: Returns all notes for a course
      operationId: getNotesByCourseId
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesListResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/notes/{noteId}:
    parameters:
      - name: noteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the note

    get:
      tags:
        - notes
      summary: Get note by ID
      description: Returns a note by its ID
      operationId: getNoteById
      responses:
        '200':
          description: Note information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteResponse'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - notes
      summary: Update note
      description: Updates an existing note
      operationId: updateNote
      requestBody:
        $ref: '#/components/requestBodies/NoteRequest'
      responses:
        '200':
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - notes
      summary: Delete note
      description: Deletes a note by its ID
      operationId: deleteNote
      responses:
        '200':
          description: Note deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # API Statistics Endpoints
  /api/v1/statistics:
    get:
      tags:
        - statistics
      summary: Get API usage statistics summary
      description: Returns a summary of overall API usage statistics
      operationId: getApiStatisticsSummary
      responses:
        '200':
          description: Statistics summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsSummaryResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/statistics/details:
    get:
      tags:
        - statistics
      summary: Get detailed API statistics
      description: Returns detailed statistics with optional filtering by endpoint, time range, ip address, etc.
      operationId: getApiStatisticsDetails
      parameters:
        - name: endpoint
          in: query
          required: false
          schema:
            type: string
          description: Filter by API endpoint path
        - name: method
          in: query
          required: false
          schema:
            type: string
            enum: [GET, POST, PUT, DELETE]
          description: Filter by HTTP method
        - name: ipAddress
          in: query
          required: false
          schema:
            type: string
          description: Filter by client IP address
        - name: statusCode
          in: query
          required: false
          schema:
            type: integer
          description: Filter by HTTP status code
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by start date and time
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by end date and time
        - name: userId
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: Filter by user ID
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Detailed statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  # Common schemas for reuse
  schemas:
    # Request/Response schemas
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "newuser"
          description: "Username for the new account"
        email:
          type: string
          format: email
          example: "newuser@example.com"
          description: "Email address for the new account"
        password:
          type: string
          format: password
          example: "securePassword123"
          description: "Password for the new account"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "testuser"
          description: "Username for authentication"
        password:
          type: string
          format: password
          example: "password123"
          description: "Password for authentication"

    CourseRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Introduction to Computer Science"
          description: "Course title"
        description:
          type: string
          example: "A comprehensive introduction to computer science fundamentals."
          description: "Course description"
        instructor:
          type: string
          example: "Prof. John Smith"
          description: "Course instructor"
        tags:
          type: array
          items:
            type: string
          example: ["programming", "computer science", "beginner"]
          description: "Tags associated with the course"

    NoteRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: "Week 1 - Introduction to Algorithms"
          description: "Note title"
        content:
          type: string
          example: "This note contains key points from the first week lecture on algorithms."
          description: "Note content"
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentDTO'
          description: "Attachments for the note"

    RatingRequest:
      type: object
      required:
        - rating
      properties:
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.5
          description: "Rating value between 0 and 5"

    # New Enrollment Request Schema
    EnrollmentRequest:
      type: object
      required:
        - studentId
      properties:
        studentId:
          type: integer
          format: int64
          example: 12345
          description: "ID of the student to enroll in the course"

    # Response schemas
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message details"
        errorCode:
          type: string
          example: "RESOURCE_NOT_FOUND"

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Resource deleted successfully"
        id:
          type: integer
          format: int64
          example: 101

    Register200Response:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully"
        userId:
          type: integer
          example: 12345
        username:
          type: string
          example: "newuser"
        email:
          type: string
          example: "newuser@example.com"

    Login200Response:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
        user:
          $ref: '#/components/schemas/UserDTO'

    ValidateToken200Response:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        message:
          type: string
          example: "Token is valid"
        expires:
          type: string
          format: date-time
          example: "2025-04-30T16:00:00.000Z"
        userId:
          type: integer
          example: 12345

    CourseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Course created successfully"
        course:
          $ref: '#/components/schemas/CourseDTO'

    CourseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Courses retrieved successfully"
        totalCourses:
          type: integer
          example: 3
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CourseDTO'

    SearchResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Search results retrieved successfully"
        query:
          type: string
          example: "spring"
        totalResults:
          type: integer
          example: 2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CourseDTO'

    RatingResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Course rated successfully"
        courseId:
          type: integer
          format: int64
          example: 101
        rating:
          type: number
          format: float
          example: 4.5
        totalRatings:
          type: integer
          example: 132

    VisitResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Course visit recorded"
        courseId:
          type: integer
          format: int64
          example: 101
        visitCount:
          type: integer
          example: 245

    NoteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Note added successfully"
        note:
          $ref: '#/components/schemas/NoteDTO'

    NotesListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Notes retrieved successfully"
        courseId:
          type: integer
          format: int64
          example: 101
        totalNotes:
          type: integer
          example: 3
        notes:
          type: array
          items:
            $ref: '#/components/schemas/NoteDTO'

    # New Enrollment Response Schemas
    EnrollmentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Student enrolled successfully"
        courseId:
          type: integer
          format: int64
          example: 101
        studentId:
          type: integer
          format: int64
          example: 12345
        enrollmentDate:
          type: string
          format: date-time
          example: "2025-04-15T10:30:00.000Z"

    EnrollmentsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Enrolled students retrieved successfully"
        courseId:
          type: integer
          format: int64
          example: 101
        totalStudents:
          type: integer
          example: 3
        students:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'

    # API Statistics Schemas
    ApiStatisticsDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1001
        endpoint:
          type: string
          example: "/api/v1/courses"
        method:
          type: string
          example: "GET"
        ipAddress:
          type: string
          example: "192.168.1.1"
        statusCode:
          type: integer
          example: 200
        responseTimeMs:
          type: integer
          format: int64
          example: 150
        userAgent:
          type: string
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        requestTimestamp:
          type: string
          format: date-time
          example: "2025-04-20T15:30:45.000Z"
        userId:
          type: integer
          format: int64
          example: 12345
          nullable: true

    StatisticsSummaryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Statistics retrieved successfully"
        totalRequests:
          type: integer
          example: 1250
        endpointStats:
          type: array
          items:
            type: object
            properties:
              endpoint:
                type: string
                example: "/api/v1/courses"
              count:
                type: integer
                example: 350
              percentage:
                type: number
                format: float
                example: 28.0
        methodStats:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
                example: "GET"
              count:
                type: integer
                example: 850
              percentage:
                type: number
                format: float
                example: 68.0
        statusCodeStats:
          type: array
          items:
            type: object
            properties:
              statusCode:
                type: integer
                example: 200
              count:
                type: integer
                example: 1150
              percentage:
                type: number
                format: float
                example: 92.0
        averageResponseTime:
          type: number
          format: float
          example: 120.5
        uniqueIpAddresses:
          type: integer
          example: 45
        uniqueUsers:
          type: integer
          example: 32
        timeStats:
          type: object
          properties:
            today:
              type: integer
              example: 125
            lastWeek:
              type: integer
              example: 750
            lastMonth:
              type: integer
              example: 3200

    StatisticsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Statistics retrieved successfully"
        totalRecords:
          type: integer
          example: 120
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalPages:
          type: integer
          example: 6
        filter:
          type: object
          properties:
            endpoint:
              type: string
              nullable: true
              example: "/api/v1/courses"
            method:
              type: string
              nullable: true
              example: null
            statusCode:
              type: integer
              nullable: true
              example: null
            ipAddress:
              type: string
              nullable: true
              example: null
            dateRange:
              type: string
              nullable: true
              example: "2025-04-01T00:00:00Z to 2025-04-27T23:59:59Z"
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/ApiStatisticsDTO'

    # DTO schemas
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          example: 12345
        username:
          type: string
          example: "testuser"
        email:
          type: string
          example: "user@example.com"
        role:
          type: string
          example: "USER"

    CourseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        title:
          type: string
          example: "Introduction to Computer Science"
        description:
          type: string
          example: "A comprehensive introduction to computer science fundamentals."
        instructor:
          type: string
          example: "Prof. John Smith"
        createdAt:
          type: string
          format: date-time
          example: "2025-03-30T14:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-30T14:30:00.000Z"
        rating:
          type: number
          format: float
          example: 4.8
        totalRatings:
          type: integer
          example: 120
        totalVisits:
          type: integer
          example: 2345
        tags:
          type: array
          items:
            type: string
          example: ["programming", "computer science", "beginner"]

    NoteDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 201
        courseId:
          type: integer
          format: int64
          example: 101
        title:
          type: string
          example: "Week 1 - Introduction to Algorithms"
        content:
          type: string
          example: "This note contains key points from the first week lecture on algorithms."
        author:
          type: string
          example: "User123"
        createdAt:
          type: string
          format: date-time
          example: "2025-03-30T15:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-30T15:30:00.000Z"
        likes:
          type: integer
          example: 25
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentDTO'

    AttachmentDTO:
      type: object
      properties:
        id:
          type: integer
          example: 301
        name:
          type: string
          example: "document.pdf"
        size:
          type: integer
          example: 1048576

  # Request body definitions
  requestBodies:
    RegisterRequest:
      description: Registration information for a new user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterRequest'
          examples:
            student:
              summary: Standard student registration
              value:
                username: "student2025"
                email: "student@example.com"
                password: "SecureP@ss123"
            instructor:
              summary: Instructor registration
              value:
                username: "professor"
                email: "professor@university.edu"
                password: "Faculty$2025"

    LoginRequest:
      description: Credentials for user authentication
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequest'
          examples:
            standard:
              summary: Standard login
              value:
                username: "student2025"
                password: "SecureP@ss123"

    CourseRequest:
      description: Course information to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CourseRequest'
          examples:
            programming:
              summary: Programming course
              value:
                title: "Introduction to Python Programming"
                description: "Learn the basics of Python programming language"
                instructor: "Dr. Jane Smith"
                tags: ["python", "programming", "beginner"]
            database:
              summary: Database course
              value:
                title: "Advanced Database Systems"
                description: "Study of modern database management systems"
                instructor: "Prof. Robert Johnson"
                tags: ["database", "SQL", "advanced"]

    NoteRequest:
      description: Note information to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoteRequest'
          examples:
            lecture:
              summary: Lecture notes
              value:
                title: "Lecture 1 - Introduction"
                content: "Key points from today's lecture on fundamental concepts."
                attachments: [
                  {
                    "name": "lecture1_slides.pdf",
                    "size": 2097152
                  }
                ]

    RatingRequest:
      description: Rating information for a course
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RatingRequest'
          examples:
            fiveStar:
              summary: Five-star rating
              value:
                rating: 5.0
            average:
              summary: Average rating
              value:
                rating: 3.5

    # New Enrollment Request Body
    EnrollmentRequest:
      description: Student enrollment information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnrollmentRequest'
          examples:
            standard:
              summary: Standard enrollment
              value:
                studentId: 12345

  # Security schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

# Global security - applied to all operations unless overridden
security:
  - bearerAuth: []